import  math
import  numpy
import  typing



def find_center( rx: float, x: numpy.array ) -> int:
    try:
        w = numpy.where( x <= rx )[0][-1]
    except:
        w = 0
    if( w >= len( x ) - 1 ):
        return( w - 1 )
    else:
        return( w )
        


class gaussian( object ):
    def __init__( self, x: numpy.array, y: numpy.array,
            sigma: typing.Optional[float] = 0.1 ):
        self.x = x
        self.y = y
        self.sigma = sigma


    def calc( self, rx: float ) -> tuple:
        d  = ( rx - self.x ) / self.sigma
        w  = numpy.exp( - numpy.square( d ) )
        t  = numpy.sum( w )
        ry = numpy.sum( self.y * w ) / t
        dy = ( ry * numpy.sum( w * d ) - numpy.sum( self.y * w * d ) ) / ( t * self.sigma )
        return( ry, 2.0 * dy )



class cubic_spline( object ):
    def __init__( self, x: numpy.array, y: numpy.array ):
        t = numpy.argsort( x )
        self.x = x[t]
        self.y = y[t]
        self.n = len( x )
        self.y2 = numpy.zeros( self.n )
        u = numpy.zeros( self.n )
        u[0]  = 0.0
        u[-1] = 0.0
        self.y2[0]  = 0.0
        self.y2[-1] = 0.0
        for i in range( 1, self.n - 1 ):
            s = ( self.x[i] - self.x[i-1] ) / ( self.x[i+1] - self.x[i-1] )
            p = s * self.y2[i-1] + 2.0
            self.y2[i] = ( s - 1.0 ) / p
            u[i]=( 6.0 * ( ( self.y[i+1] - self.y[i] ) / ( self.x[i+1] - self.x[i] ) - ( self.y[i] - self.y[i-1] ) / ( self.x[i] - self.x[i-1] ) ) / ( self.x[i+1] - self.x[i-1] ) - s * u[i-1] ) / p
        for i in range( self.n-2, -1, -1 ):
            self.y2[i] = self.y2[i] * self.y2[i+1] + u[i]

    
    def calc( self, rx: float ) -> tuple:
        klo = max( 0, find_center( rx, self.x ) )
        khi = min( self.n - 1, klo + 1 )
        h   = self.x[khi] - self.x[klo]
        a   = ( self.x[khi] - rx ) / h
        b   = ( rx - self.x[klo] ) / h
        ry  = a * self.y[klo] + b * self.y[khi] + ( ( a * a * a - a ) * self.y2[klo] + ( b * b * b - b ) * self.y2[khi] ) * ( h * h ) / 6.0
        dy  = ( self.y[khi] - self.y[klo] ) / h + h * ( ( 3.0 * b * b - 1.0 ) * self.y2[khi] - ( 3.0 * a * a - 1.0 ) * self.y2[klo] ) / 6.0
        return( ry, dy )



class hermite_spline( object ):
    """
    Available methods: steffen  /  akima  /  [fritsch_carlson]
    """
    def __init__( self, x: numpy.array, y: numpy.array,
            method: typing.Optional[str] = "fritsch_carlson" ):
        t = numpy.argsort( x )
        self.x = x[t]
        self.y = y[t]
        self.n = len( x )
        dx = numpy.ediff1d( self.x )
        dy = numpy.ediff1d( self.y )
        m  = dy / dx
        self.c1 = []
        self.c2 = []
        self.c3 = []
        # -------------------------------------------------------------------
        # Steffen
        if( method == "steffen" ):
            self.c1.append( m[0] )
            for i in range( self.n - 2 ):
                self.c1.append( ( numpy.copysign( 1.0, m[i] ) + numpy.copysign( 1.0, m[i+1] ) ) * min( math.fabs( m[i] ), math.fabs( m[i+1] ), 0.5 * math.fabs( ( dx[i] * m[i+1] + dx[i+1] * m[i] ) / ( dx[i] + dx[i+1] ) ) ) )
            self.c1.append( m[-1] )
        # -------------------------------------------------------------------
        # Akima
        elif( method == "akima" ):
            M  = [ 2.0 * m[0] - m[1], 2.0 * m[0] - m[1] ] + m.tolist()
            M += [ 2.0 * m[-1] - m[-2], 2.0 * ( 2.0 * m[-1] - m[-2] ) - m[-1] ]
            for i in range( self.n ):
                a = math.fabs( M[i+3] - M[i+2] )
                b = math.fabs( M[i+1] - M[i] )
                if( a+b > 0.0 ):
                    self.c1.append( ( b * M[i+2] + a * M[i+1] ) / ( a + b ) )
                else:
                    self.c1.append( ( M[i+2] + M[i+1] ) / 2.0 )
        # -------------------------------------------------------------------
        # Fritsch-Carlson
        else:
            self.c1.append( m[0] )
            for i in range( self.n - 2 ):
                if( m[i] * m[i+1] <= 0.0 ):
                    self.c1.append( 0.0 )
                else:
                    t = dx[i] + dx[i+1]
                    self.c1.append( 3.0 * t / ( ( t + dx[i+1] ) / m[i] + ( t + dx[i] ) / m[i+1] ) )
            self.c1.append( m[-1] )
        # -------------------------------------------------------------------
        for i in range( self.n - 1 ):
            t = self.c1[i] + self.c1[i+1] - m[i] - m[i]
            self.c2.append( ( m[i] - self.c1[i] - t ) / dx[i] )
            self.c3.append( t / ( dx[i] * dx[i] ) )


    def calc( self, rx: float ) -> tuple:
        i  = find_center( rx, self.x )
        h  = rx - self.x[i]
        h2 = h * h
        ry = self.y[i] + ( self.c1[i] + self.c2[i] * h + self.c3[i] * h2 ) * h
        dy = self.c1[i] + ( 2.0 * self.c2[i] + 3.0 * self.c3[i] * h ) * h
        return( ry, dy )



class interpolate_2d( object ):
    """
    Z data should be porperly sorted as fixed_X, changing_Y
    
    Interpolant can make use of a lambda function:

            interpolant = lambda x,y: qm3.utils.interpolation.hermite_spline( x, y, method = "akima" )
    """
    def __init__( self, x: numpy.array, y: numpy.array, z: numpy.array,
            interpolant: typing.Optional[typing.Callable] = cubic_spline ):
        self.nx = len( x )
        self.ny = len( y )
        self.x  = x
        self.y  = y
        self.z  = z
        self.II = interpolant
        self.Ix = []
        for i in range( self.nx ):
            self.Ix.append( self.II( self.y, numpy.array( [ self.z[self.ny*i+j] for j in range( self.ny ) ] ) ) )
        self.Iy = []
        for j in range( self.ny ):
            self.Iy.append( self.II( self.x, numpy.array( [ self.z[self.ny*i+j] for i in range( self.nx ) ] ) ) )


    def calc( self, rx: float, ry: float ) -> tuple:
        ox = self.II( self.x, numpy.array( [ self.Ix[i].calc( ry )[0] for i in range( self.nx ) ] ) ).calc( rx )
        oy = self.II( self.y, numpy.array( [ self.Iy[i].calc( rx )[0] for i in range( self.ny ) ] ) ).calc( ry )
        return( ( ox[0] + oy[0] ) * 0.5, ox[1], oy[1] )



def savitzky_golay( y: numpy.array, points: typing.Optional[int] = 0 ) -> numpy.array:
    """
    Savitzky-Golay cubic smoothing
    Anal. Chem. v36, p1627 (1964) [doi:10.1021/ac60214a047]

    points are the total fitting points (2 * m + 1)
    WARNING: Y values for equally spaced X ones
    returns the fitted values
    """
    n = len( y )
    if( points < 5 ):
        t = sorted( [ ( n >= i, i ) for i in [ 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27 ] ] )[-1]
        if( t[0] ):
            points = t[1]
            print( "\n>> Savitzky-Golay smoothing total fitting points:", points )
    m  = ( points - 1 ) // 2
    wf = None
    if( points == 7 and n >= 7 ):
        wf = [ 42,42,42,21,42,42,42 ]
        cf = numpy.array( [ [ 39,8,-4,-4,1,4,-2 ],
                [ 8,19,16,6,-4,-7,4 ],
                [ -4,16,19,12,2,-4,1 ],
                [ -2,3,6,7,6,3,-2 ],
                [ 1,-4,2,12,19,16,-4 ],
                [ 4,-7,-4,6,16,19,8 ],
                [ -2,4,1,-4,-4,8,39 ] ] )
    elif( points == 9 and n >= 9 ):
        wf = [ 99,198,1386,462,231,462,1386,198,99 ]
        cf = numpy.array( [ [ 85,28,-2,-12,-9,0,8,8,-7 ],
                [ 56,65,56,36,12,-9,-20,-14,16 ],
                [ -28,392,515,432,234,12,-143,-140,112 ],
                [ -56,84,144,145,108,54,4,-21,0 ],
                [ -21,14,39,54,59,54,39,14,-21 ],
                [ 0,-21,4,54,108,145,144,84,-56 ],
                [ 112,-140,-143,12,234,432,515,392,-28 ],
                [ 16,-14,-20,-9,12,36,56,65,56 ],
                [ -7,8,8,0,-9,-12,-2,28,85 ] ] )
    elif( points == 11 and n >= 11 ):
        wf = [ 143,143,429,858,429,429,429,858,429,143,143 ]
        cf = numpy.array( [ [ 113,48,8,-12,-17,-12,-2,8,13,8,-12 ],
                [ 48,41,32,22,12,3,-4,-8,-8,-3,8 ],
                [ 24,96,123,116,86,44,1,-32,-44,-24,39 ],
                [ -72,132,232,251,212,138,52,-23,-64,-48,48 ],
                [ -51,36,86,106,103,84,56,26,1,-12,-6 ],
                [ -36,9,44,69,84,89,84,69,44,9,-36 ],
                [ -6,-12,1,26,56,84,103,106,86,36,-51 ],
                [ 48,-48,-64,-23,52,138,212,251,232,132,-72 ],
                [ 39,-24,-44,-32,1,44,86,116,123,96,24 ],
                [ 8,-3,-8,-8,-4,3,12,22,32,41,48 ],
                [ -12,8,13,8,-2,-12,-17,-12,8,48,113 ] ] )
    elif( points == 13 and n >= 13 ):
        wf = [ 364,91,2002,1001,4004,1001,143,1001,4004,1001,2002,91,364 ]
        cf = numpy.array( [ [ 265,132,42,-12,-37,-40,-28,-8,13,28,30,12,-33 ],
                [ 33,25,18,12,7,3,0,-2,-3,-3,-2,0,3 ],
                [ 231,396,460,444,369,256,126,0,-101,-156,-144,-44,165 ],
                [ -33,132,222,251,233,182,112,37,-29,-72,-78,-33,77 ],
                [ -407,308,738,932,939,808,588,328,77,-116,-202,-132,143 ],
                [ -110,33,128,182,202,195,168,128,82,37,0,-22,-22 ],
                [ -11,0,9,16,21,24,25,24,21,16,9,0,-11 ],
                [ -22,-22,0,37,82,128,168,195,202,182,128,33,-110 ],
                [ 143,-132,-202,-116,77,328,588,808,939,932,738,308,-407 ],
                [ 77,-33,-78,-72,-29,37,112,182,233,251,222,132,-33 ],
                [ 165,-44,-144,-156,-101,0,126,256,369,444,460,396,231 ],
                [ 3,0,-2,-3,-3,-2,0,3,7,12,18,25,33 ],
                [ -33,12,30,28,13,-8,-28,-40,-37,-12,42,132,265 ] ] )
    elif( points == 15 and n >= 15 ):
        wf = [ 3060,21420,278460,139230,278460,278460,30940,1105,30940,278460,278460,139230,278460,21420,3060 ]
        cf = numpy.array( [ [ 2059,1144,484,44,-211,-316,-306,-216,-81,64,184,244,209,44,-286 ],
                [ 8008,5833,4048,2618,1508,683,108,-252,-432,-467,-392,-242,-52,143,308 ],
                [ 44044,52624,54709,51524,44294,34244,22599,10584,-576,-9656,-15431,-16676,-12166,-676,19019 ],
                [ 2002,17017,25762,29252,28502,24527,18342,10962,3402,-3323,-8198,-10208,-8338,-1573,11102 ],
                [ -19201,19604,44294,57004,59869,55024,44604,30744,15579,1244,-10126,-16396,-15431,-5096,16744 ],
                [ -28756,8879,34244,49054,55024,53869,47304,37044,24804,12299,1244,-6646,-9656,-6071,5824 ],
                [ -3094,156,2511,4076,4956,5256,5081,4536,3726,2756,1731,756,-64,-624,-819 ],
                [ -78,-13,42,87,122,147,162,167,162,147,122,87,42,-13,-78 ],
                [ -819,-624,-64,756,1731,2756,3726,4536,5081,5256,4956,4076,2511,156,-3094 ],
                [ 5824,-6071,-9656,-6646,1244,12299,24804,37044,47304,53869,55024,49054,34244,8879,-28756 ],
                [ 16744,-5096,-15431,-16396,-10126,1244,15579,30744,44604,55024,59869,57004,44294,19604,-19201 ],
                [ 11102,-1573,-8338,-10208,-8198,-3323,3402,10962,18342,24527,28502,29252,25762,17017,2002 ],
                [ 19019,-676,-12166,-16676,-15431,-9656,-576,10584,22599,34244,44294,51524,54709,52624,44044 ],
                [ 308,143,-52,-242,-392,-467,-432,-252,108,683,1508,2618,4048,5833,8008 ],
                [ -286,44,209,244,184,64,-81,-216,-306,-316,-211,44,484,1144,2059 ] ] )
    elif( points == 17 and n >= 17 ):
        wf = [ 969,3876,3876,3876,1938,3876,3876,3876,323,3876,3876,3876,1938,3876,3876,3876,969 ]
        cf = numpy.array( [ [ 605,364,182,52,-33,-80,-96,-88,-63,-28,10,44,67,72,52,0,-91 ],
                [ 1456,1055,728,468,268,121,20,-42,-72,-77,-64,-40,-12,13,28,26,0 ],
                [ 728,728,691,624,534,428,313,196,84,-16,-97,-152,-174,-156,-91,28,208 ],
                [ 208,468,624,691,684,618,508,369,216,64,-72,-177,-236,-234,-156,13,288 ],
                [ -66,134,267,342,368,354,309,242,162,78,-1,-66,-108,-118,-87,-6,134 ],
                [ -320,121,428,618,708,715,656,548,408,253,100,-34,-132,-177,-152,-40,176 ],
                [ -384,20,313,508,618,656,635,568,468,348,221,100,-2,-72,-97,-64,40 ],
                [ -352,-42,196,369,484,548,568,551,504,434,348,253,156,64,-16,-77,-112 ],
                [ -21,-6,7,18,27,34,39,42,43,42,39,34,27,18,7,-6,-21 ],
                [ -112,-77,-16,64,156,253,348,434,504,551,568,548,484,369,196,-42,-352 ],
                [ 40,-64,-97,-72,-2,100,221,348,468,568,635,656,618,508,313,20,-384 ],
                [ 176,-40,-152,-177,-132,-34,100,253,408,548,656,715,708,618,428,121,-320 ],
                [ 134,-6,-87,-118,-108,-66,-1,78,162,242,309,354,368,342,267,134,-66 ],
                [ 288,13,-156,-234,-236,-177,-72,64,216,369,508,618,684,691,624,468,208 ],
                [ 208,28,-91,-156,-174,-152,-97,-16,84,196,313,428,534,624,691,728,728 ],
                [ 0,26,28,13,-12,-40,-64,-77,-72,-42,20,121,268,468,728,1055,1456 ],
                [ -91,0,52,72,67,44,10,-28,-63,-88,-96,-80,-33,52,182,364,605 ] ] )
    elif( points == 19 and n >= 19 ):
        wf = [ 1463,4389,74613,298452,74613,21318,10659,298452,6783,2261,6783,298452,10659,21318,74613,298452,74613,4389,1463 ]
        cf = numpy.array( [ [ 851,544,304,124,-3,-84,-126,-136,-121,-88,-44,4,49,84,102,96,59,-16,-136 ],
                [ 1632,1193,832,542,316,147,28,-48,-88,-99,-88,-62,-28,7,36,52,48,17,-48 ],
                [ 15504,14144,12601,10924,9162,7364,5579,3856,2244,792,-451,-1436,-2114,-2436,-2353,-1816,-776,816,3009 ],
                [ 25296,36856,43696,46439,45708,42126,36316,28901,20504,11748,3256,-4349,-10444,-14406,-15612,-13439,-7264,3536,19584 ],
                [ -153,5372,9162,11427,12377,12222,11172,9437,7227,4752,2222,-153,-2163,-3598,-4248,-3903,-2353,612,5202 ],
                [ -1224,714,2104,3009,3492,3616,3444,3039,2464,1782,1056,349,-276,-756,-1028,-1029,-696,34,1224 ],
                [ -918,68,797,1297,1596,1722,1703,1567,1342,1056,737,413,112,-138,-309,-373,-302,-68,357 ],
                [ -27744,-3264,15424,28901,37748,42546,43876,42319,38456,32868,26136,18841,11564,4886,-612,-4349,-5744,-4216,816 ],
                [ -561,-136,204,466,657,784,854,874,851,792,704,594,469,336,202,74,-41,-136,-204 ],
                [ -136,-51,24,89,144,189,224,249,264,269,264,249,224,189,144,89,24,-51,-136 ],
                [ -204,-136,-41,74,202,336,469,594,704,792,851,874,854,784,657,466,204,-136,-561 ],
                [ 816,-4216,-5744,-4349,-612,4886,11564,18841,26136,32868,38456,42319,43876,42546,37748,28901,15424,-3264,-27744 ],
                [ 357,-68,-302,-373,-309,-138,112,413,737,1056,1342,1567,1703,1722,1596,1297,797,68,-918 ],
                [ 1224,34,-696,-1029,-1028,-756,-276,349,1056,1782,2464,3039,3444,3616,3492,3009,2104,714,-1224 ],
                [ 5202,612,-2353,-3903,-4248,-3598,-2163,-153,2222,4752,7227,9437,11172,12222,12377,11427,9162,5372,-153 ],
                [ 19584,3536,-7264,-13439,-15612,-14406,-10444,-4349,3256,11748,20504,28901,36316,42126,45708,46439,43696,36856,25296 ],
                [ 3009,816,-776,-1816,-2353,-2436,-2114,-1436,-451,792,2244,3856,5579,7364,9162,10924,12601,14144,15504 ],
                [ -48,17,48,52,36,7,-28,-62,-88,-99,-88,-48,28,147,316,542,832,1193,1632 ],
                [ -136,-16,59,96,102,84,49,4,-44,-88,-121,-136,-126,-84,-3,124,304,544,851 ] ] )
    elif( points == 21 and n >= 21 ):
        wf = [ 10626,5313,100947,302841,605682,302841,302841,302841,605682,33649,3059,33649,605682,302841,302841,302841,605682,302841,100947,5313,10626 ]
        cf = numpy.array( [ [ 5781,3876,2346,1156,271,-344,-724,-904,-919,-804,-594,-324,-29,256,496,656,701,596,306,-204,-969 ],
                [ 1938,1437,1020,680,410,203,52,-50,-110,-135,-132,-108,-70,-25,20,58,82,85,60,0,-102 ],
                [ 22287,19380,16593,13940,11435,9092,6925,4948,3175,1620,297,-780,-1597,-2140,-2395,-2348,-1985,-1292,-255,1140,2907 ],
                [ 32946,38760,41820,42469,41050,37906,33380,27815,21554,14940,8316,2025,-3590,-8186,-11420,-12949,-12430,-9520,-3876,4845,16986 ],
                [ 15447,46740,68610,82100,88253,88112,82720,73120,60355,45468,29502,13500,-1495,-14440,-24292,-30008,-30545,-24860,-11910,9348,39957 ],
                [ -9804,11571,27276,37906,44056,46321,45296,41576,35756,28431,20196,11646,3376,-4019,-9944,-13804,-15004,-12949,-7044,3306,18696 ],
                [ -20634,2964,20775,33380,41360,45296,45769,43360,38650,32220,24651,16524,8420,920,-5395,-9944,-12146,-11420,-7185,1140,14136 ],
                [ -25764,-2850,14844,27815,36560,41576,43360,42409,39220,34290,28116,21195,14024,7100,920,-4019,-7220,-8186,-6420,-1425,7296 ],
                [ -52383,-12540,19050,43108,60355,71512,77300,78440,75653,69660,61182,50940,39655,28048,16840,6752,-1495,-7180,-9582,-7980,-1653 ],
                [ -2546,-855,540,1660,2526,3159,3580,3810,3870,3781,3564,3240,2830,2355,1836,1294,750,225,-260,-684,-1026 ],
                [ -171,-76,9,84,149,204,249,284,309,324,329,324,309,284,249,204,149,84,9,-76,-171 ],
                [ -1026,-684,-260,225,750,1294,1836,2355,2830,3240,3564,3781,3870,3810,3580,3159,2526,1660,540,-855,-2546 ],
                [ -1653,-7980,-9582,-7180,-1495,6752,16840,28048,39655,50940,61182,69660,75653,78440,77300,71512,60355,43108,19050,-12540,-52383 ],
                [ 7296,-1425,-6420,-8186,-7220,-4019,920,7100,14024,21195,28116,34290,39220,42409,43360,41576,36560,27815,14844,-2850,-25764 ],
                [ 14136,1140,-7185,-11420,-12146,-9944,-5395,920,8420,16524,24651,32220,38650,43360,45769,45296,41360,33380,20775,2964,-20634 ],
                [ 18696,3306,-7044,-12949,-15004,-13804,-9944,-4019,3376,11646,20196,28431,35756,41576,45296,46321,44056,37906,27276,11571,-9804 ],
                [ 39957,9348,-11910,-24860,-30545,-30008,-24292,-14440,-1495,13500,29502,45468,60355,73120,82720,88112,88253,82100,68610,46740,15447 ],
                [ 16986,4845,-3876,-9520,-12430,-12949,-11420,-8186,-3590,2025,8316,14940,21554,27815,33380,37906,41050,42469,41820,38760,32946 ],
                [ 2907,1140,-255,-1292,-1985,-2348,-2395,-2140,-1597,-780,297,1620,3175,4948,6925,9092,11435,13940,16593,19380,22287 ],
                [ -102,0,60,85,82,58,20,-25,-70,-108,-132,-135,-110,-50,52,203,410,680,1020,1437,1938 ],
                [ -969,-204,306,596,701,656,496,256,-29,-324,-594,-804,-919,-904,-724,-344,271,1156,2346,3876,5781 ] ] )
    elif( points == 23 and n >= 23 ):
        wf = [ 2990,32890,230230,23023,46046,230230,230230,16445,6578,46046,17710,805,17710,46046,6578,16445,230230,230230,46046,23023,230230,32890,2990 ]
        cf = numpy.array( [ [ 1527,1064,684,380,145,-28,-146,-216,-245,-240,-208,-156,-91,-20,50,112,159,184,180,140,57,-76,-266 ],
                [ 11704,8817,6384,4370,2740,1459,492,-196,-640,-875,-936,-858,-676,-425,-140,144,392,569,640,570,324,-133,-836 ],
                [ 52668,44688,37399,30780,24810,19468,14733,10584,7000,3960,1443,-572,-2106,-3180,-3815,-4032,-3852,-3296,-2385,-1140,418,2268,4389 ],
                [ 2926,3059,3078,2997,2830,2591,2294,1953,1582,1195,806,429,78,-233,-490,-679,-786,-797,-698,-475,-114,399,1078 ],
                [ 2233,3836,4962,5660,5979,5968,5676,5152,4445,3604,2678,1716,767,-120,-896,-1512,-1919,-2068,-1910,-1396,-477,896,2772 ],
                [ -2156,10213,19468,25910,29840,31559,31368,29568,26460,22345,17524,12298,6968,1835,-2800,-6636,-9372,-10707,-10340,-7970,-3296,3983,14168 ],
                [ -11242,3444,14733,22940,28380,31368,32219,31248,28770,25100,20553,15444,10088,4800,-105,-4312,-7506,-9372,-9595,-7860,-3852,2744,12243 ],
                [ -1188,-98,756,1395,1840,2112,2232,2221,2100,1890,1612,1287,936,580,240,-63,-308,-474,-540,-485,-288,72,616 ],
                [ -539,-128,200,452,635,756,822,840,817,760,676,572,455,332,210,96,-3,-80,-128,-140,-109,-28,110 ],
                [ -3696,-1225,792,2390,3604,4469,5020,5292,5320,5139,4784,4290,3692,3025,2324,1624,960,367,-120,-466,-636,-595,-308 ],
                [ -1232,-504,111,620,1030,1348,1581,1736,1820,1840,1803,1716,1586,1420,1225,1008,776,536,295,60,-162,-364,-539 ],
                [ -42,-21,-2,15,30,43,54,63,70,75,78,79,78,75,70,63,54,43,30,15,-2,-21,-42 ],
                [ -539,-364,-162,60,295,536,776,1008,1225,1420,1586,1716,1803,1840,1820,1736,1581,1348,1030,620,111,-504,-1232 ],
                [ -308,-595,-636,-466,-120,367,960,1624,2324,3025,3692,4290,4784,5139,5320,5292,5020,4469,3604,2390,792,-1225,-3696 ],
                [ 110,-28,-109,-140,-128,-80,-3,96,210,332,455,572,676,760,817,840,822,756,635,452,200,-128,-539 ],
                [ 616,72,-288,-485,-540,-474,-308,-63,240,580,936,1287,1612,1890,2100,2221,2232,2112,1840,1395,756,-98,-1188 ],
                [ 12243,2744,-3852,-7860,-9595,-9372,-7506,-4312,-105,4800,10088,15444,20553,25100,28770,31248,32219,31368,28380,22940,14733,3444,-11242 ],
                [ 14168,3983,-3296,-7970,-10340,-10707,-9372,-6636,-2800,1835,6968,12298,17524,22345,26460,29568,31368,31559,29840,25910,19468,10213,-2156 ],
                [ 2772,896,-477,-1396,-1910,-2068,-1919,-1512,-896,-120,767,1716,2678,3604,4445,5152,5676,5968,5979,5660,4962,3836,2233 ],
                [ 1078,399,-114,-475,-698,-797,-786,-679,-490,-233,78,429,806,1195,1582,1953,2294,2591,2830,2997,3078,3059,2926 ],
                [ 4389,2268,418,-1140,-2385,-3296,-3852,-4032,-3815,-3180,-2106,-572,1443,3960,7000,10584,14733,19468,24810,30780,37399,44688,52668 ],
                [ -836,-133,324,570,640,569,392,144,-140,-425,-676,-858,-936,-875,-640,-196,492,1459,2740,4370,6384,8817,11704 ],
                [ -266,-76,57,140,180,184,159,112,50,-20,-91,-156,-208,-240,-245,-216,-146,-28,145,380,684,1064,1527 ] ] )
    elif( points == 25 and n >= 25 ):
        wf = [ 2925,5850,134550,1480050,740025,1480050,1480050,493350,246675,1480050,1480050,134550,5175,134550,1480050,1480050,246675,493350,1480050,1480050,740025,1480050,134550,5850,2925 ]
        cf = numpy.array( [ [ 1407,1012,682,412,197,32,-88,-168,-213,-228,-218,-188,-143,-88,-28,32,87,132,162,172,157,112,32,-88,-253 ],
                [ 2024,1549,1144,804,524,299,124,-6,-96,-151,-176,-176,-156,-121,-76,-26,24,69,104,124,124,99,44,-46,-176 ],
                [ 31372,26312,21767,17712,14122,10972,8237,5892,3912,2272,947,-88,-858,-1388,-1703,-1828,-1788,-1608,-1313,-928,-478,12,517,1012,1472 ],
                [ 208472,203412,194832,183197,168972,152622,134612,115407,95472,75272,55272,35937,17732,1122,-13428,-25453,-34488,-40068,-41728,-39003,-31428,-18538,132,25047,56672 ],
                [ 49841,66286,77671,84486,87221,86366,82411,75846,67161,56846,45391,33286,21021,9086,-2029,-11834,-19839,-25554,-28489,-28154,-24059,-15714,-2629,15686,39721 ],
                [ 16192,75647,120692,152622,172732,182317,182672,175092,160872,141307,117692,91322,63492,35497,8632,-15808,-36528,-52233,-61628,-63418,-56308,-39003,-10208,31372,87032 ],
                [ -44528,31372,90607,134612,164822,182672,189597,187032,176412,159172,136747,110572,82082,52712,23897,-2928,-26328,-44868,-57113,-61628,-56978,-41728,-14443,26312,81972 ],
                [ -28336,-506,21604,38469,50564,58364,62344,62979,60744,56114,49564,41569,32604,23144,13664,4639,-3456,-10146,-14956,-17411,-17036,-13356,-5896,5819,22264 ],
                [ -17963,-4048,7172,15912,22387,26812,29402,30372,29937,28312,25712,22352,18447,14212,9862,5612,1677,-1728,-4388,-6088,-6613,-5748,-3278,1012,7337 ],
                [ -115368,-38203,24992,75272,113692,141307,159172,168342,169872,164817,154232,139172,120692,99847,77692,55282,33672,13917,-2928,-15808,-23668,-25453,-20108,-6578,16192 ],
                [ -110308,-44528,10417,55272,90782,117692,136747,148692,154272,154232,149317,140272,127842,112772,95807,77692,59172,40992,23897,8632,-4058,-13428,-18733,-19228,-14168 ],
                [ -8648,-4048,-88,3267,6052,8302,10052,11337,12192,12652,12752,12527,12012,11242,10252,9077,7752,6312,4792,3227,1652,102,-1388,-2783,-4048 ],
                [ -253,-138,-33,62,147,222,287,342,387,422,447,462,467,462,447,422,387,342,287,222,147,62,-33,-138,-253 ],
                [ -4048,-2783,-1388,102,1652,3227,4792,6312,7752,9077,10252,11242,12012,12527,12752,12652,12192,11337,10052,8302,6052,3267,-88,-4048,-8648 ],
                [ -14168,-19228,-18733,-13428,-4058,8632,23897,40992,59172,77692,95807,112772,127842,140272,149317,154232,154272,148692,136747,117692,90782,55272,10417,-44528,-110308 ],
                [ 16192,-6578,-20108,-25453,-23668,-15808,-2928,13917,33672,55282,77692,99847,120692,139172,154232,164817,169872,168342,159172,141307,113692,75272,24992,-38203,-115368 ],
                [ 7337,1012,-3278,-5748,-6613,-6088,-4388,-1728,1677,5612,9862,14212,18447,22352,25712,28312,29937,30372,29402,26812,22387,15912,7172,-4048,-17963 ],
                [ 22264,5819,-5896,-13356,-17036,-17411,-14956,-10146,-3456,4639,13664,23144,32604,41569,49564,56114,60744,62979,62344,58364,50564,38469,21604,-506,-28336 ],
                [ 81972,26312,-14443,-41728,-56978,-61628,-57113,-44868,-26328,-2928,23897,52712,82082,110572,136747,159172,176412,187032,189597,182672,164822,134612,90607,31372,-44528 ],
                [ 87032,31372,-10208,-39003,-56308,-63418,-61628,-52233,-36528,-15808,8632,35497,63492,91322,117692,141307,160872,175092,182672,182317,172732,152622,120692,75647,16192 ],
                [ 39721,15686,-2629,-15714,-24059,-28154,-28489,-25554,-19839,-11834,-2029,9086,21021,33286,45391,56846,67161,75846,82411,86366,87221,84486,77671,66286,49841 ],
                [ 56672,25047,132,-18538,-31428,-39003,-41728,-40068,-34488,-25453,-13428,1122,17732,35937,55272,75272,95472,115407,134612,152622,168972,183197,194832,203412,208472 ],
                [ 1472,1012,517,12,-478,-928,-1313,-1608,-1788,-1828,-1703,-1388,-858,-88,947,2272,3912,5892,8237,10972,14122,17712,21767,26312,31372 ],
                [ -176,-46,44,99,124,124,104,69,24,-26,-76,-121,-156,-176,-176,-151,-96,-6,124,299,524,804,1144,1549,2024 ],
                [ -253,-88,32,112,157,172,162,132,87,32,-28,-88,-143,-188,-218,-228,-213,-168,-88,32,197,412,682,1012,1407 ] ] )
    elif( points == 27 and n >= 27 ):
        wf = [ 5481,71253,356265,237510,118755,23751,10179,712530,356265,356265,71253,142506,118755,1305,118755,142506,71253,356265,356265,712530,10179,23751,118755,237510,356265,71253,5481 ]
        cf = numpy.array( [ [ 2491,1840,1288,828,453,156,-70,-232,-337,-392,-404,-380,-327,-252,-162,-64,35,128,208,268,301,300,258,168,23,-184,-460 ],
                [ 23920,18583,13984,10074,6804,4125,1988,344,-856,-1661,-2120,-2282,-2196,-1911,-1476,-940,-352,239,784,1234,1540,1653,1524,1104,344,-805,-2392 ],
                [ 83720,69920,57587,46644,37014,28620,21385,15232,10084,5864,2495,-100,-1998,-3276,-4011,-4280,-4160,-3728,-3061,-2236,-1330,-420,417,1104,1564,1720,1495 ],
                [ 35880,33580,31096,28463,25716,22890,20020,17141,14288,11496,8800,6235,3836,1638,-324,-2015,-3400,-4444,-5112,-5369,-5180,-4510,-3324,-1587,736,3680,7280 ],
                [ 9815,11340,12338,12858,12949,12660,12040,11138,10003,8684,7230,5690,4113,2548,1044,-350,-1585,-2612,-3382,-3846,-3955,-3660,-2912,-1662,139,2540,5590 ],
                [ 676,1375,1908,2289,2532,2651,2660,2573,2404,2167,1876,1545,1188,819,452,101,-220,-497,-716,-863,-924,-885,-732,-451,-28,551,1300 ],
                [ -130,284,611,858,1032,1140,1189,1186,1138,1052,935,794,636,468,297,130,-26,-164,-277,-358,-400,-396,-339,-222,-38,220,559 ],
                [ -30160,3440,30464,51423,66828,77190,83020,84829,83128,78428,71240,62075,51444,39858,27828,15865,4480,-5816,-14512,-21097,-25060,-25890,-23076,-16107,-4472,12340,34840 ],
                [ -21905,-4280,10084,21432,30009,36060,39830,41564,41507,39904,37000,33040,28269,22932,17274,11540,5975,824,-3668,-7256,-9695,-10740,-10146,-7668,-3061,3920,13520 ],
                [ -25480,-8305,5864,17244,26052,32505,36820,39214,39904,39107,37040,33920,29964,25389,20412,15250,10120,5239,824,-2908,-5740,-7455,-7836,-6666,-3728,1195,8320 ],
                [ -5252,-2120,499,2640,4338,5628,6545,7124,7400,7408,7183,6760,6174,5460,4653,3788,2900,2024,1195,448,-182,-660,-951,-1020,-832,-352,455 ],
                [ -9880,-4564,-40,3741,6828,9270,11116,12415,13216,13568,13520,13121,12420,11466,10308,8995,7576,6100,4616,3173,1820,606,-420,-1209,-1712,-1880,-1664 ],
                [ -7085,-3660,-666,1918,4113,5940,7420,8574,9423,9988,10290,10350,10189,9828,9288,8590,7755,6804,5758,4638,3465,2260,1044,-162,-1337,-2460,-3510 ],
                [ -60,-35,-12,9,28,45,60,73,84,93,100,105,108,109,108,105,100,93,84,73,60,45,28,9,-12,-35,-60 ],
                [ -3510,-2460,-1337,-162,1044,2260,3465,4638,5758,6804,7755,8590,9288,9828,10189,10350,10290,9988,9423,8574,7420,5940,4113,1918,-666,-3660,-7085 ],
                [ -1664,-1880,-1712,-1209,-420,606,1820,3173,4616,6100,7576,8995,10308,11466,12420,13121,13520,13568,13216,12415,11116,9270,6828,3741,-40,-4564,-9880 ],
                [ 455,-352,-832,-1020,-951,-660,-182,448,1195,2024,2900,3788,4653,5460,6174,6760,7183,7408,7400,7124,6545,5628,4338,2640,499,-2120,-5252 ],
                [ 8320,1195,-3728,-6666,-7836,-7455,-5740,-2908,824,5239,10120,15250,20412,25389,29964,33920,37040,39107,39904,39214,36820,32505,26052,17244,5864,-8305,-25480 ],
                [ 13520,3920,-3061,-7668,-10146,-10740,-9695,-7256,-3668,824,5975,11540,17274,22932,28269,33040,37000,39904,41507,41564,39830,36060,30009,21432,10084,-4280,-21905 ],
                [ 34840,12340,-4472,-16107,-23076,-25890,-25060,-21097,-14512,-5816,4480,15865,27828,39858,51444,62075,71240,78428,83128,84829,83020,77190,66828,51423,30464,3440,-30160 ],
                [ 559,220,-38,-222,-339,-396,-400,-358,-277,-164,-26,130,297,468,636,794,935,1052,1138,1186,1189,1140,1032,858,611,284,-130 ],
                [ 1300,551,-28,-451,-732,-885,-924,-863,-716,-497,-220,101,452,819,1188,1545,1876,2167,2404,2573,2660,2651,2532,2289,1908,1375,676 ],
                [ 5590,2540,139,-1662,-2912,-3660,-3955,-3846,-3382,-2612,-1585,-350,1044,2548,4113,5690,7230,8684,10003,11138,12040,12660,12949,12858,12338,11340,9815 ],
                [ 7280,3680,736,-1587,-3324,-4510,-5180,-5369,-5112,-4444,-3400,-2015,-324,1638,3836,6235,8800,11496,14288,17141,20020,22890,25716,28463,31096,33580,35880 ],
                [ 1495,1720,1564,1104,417,-420,-1330,-2236,-3061,-3728,-4160,-4280,-4011,-3276,-1998,-100,2495,5864,10084,15232,21385,28620,37014,46644,57587,69920,83720 ],
                [ -2392,-805,344,1104,1524,1653,1540,1234,784,239,-352,-940,-1476,-1911,-2196,-2282,-2120,-1661,-856,344,1988,4125,6804,10074,13984,18583,23920 ],
                [ -460,-184,23,168,258,300,301,268,208,128,35,-64,-162,-252,-327,-380,-404,-392,-337,-232,-70,156,453,828,1288,1840,2491 ] ] )
    elif( n >= 5 ):
        wf = [ 70,35,35,35,70 ]
        cf = numpy.array( [ [ 69,4,-6,4,-1 ], [ 2,27,12,-8,2 ], [ -3,12,17,12,-3 ], [ 2,-8,12,27,2 ], [ -1,4,-6,4,69 ] ] )
    if( wf == None ):
        return( numpy.zeros( n ) )
    else:
        f = []
        for i in range( m ):
            f.append( numpy.sum( cf[i] * y[0:points]  ) / wf[i] )
        for i in range( m, n - m ):
            f.append( numpy.sum( cf[m] * y[i-m:i+m+1] ) / wf[m] )
        for i in range( m+1, 2*m+1 ):
            f.append( numpy.sum( cf[i] * y[-points:]  ) / wf[i] )
        return( numpy.array( f ) )



class gpr( object ):
    def __init__( self, x: numpy.array, y: numpy.array, se2: typing.Optional[float] = 1.e-8 ):
# ------------------------------------------------------------------------------------
#\begin{align}
#&y' = y_{c} \left( x' \right) = K_{1xN}^T \; \left[ C^{-1} \; y \right]_{NxP} \\
#&f\left(x_{i},x_{j}\right) = a_1 \sum_{d=1}^{P}{ x_{i,d} \cdot x_{j,d}} + v_{o}\; \text{exp} \left[ - \sum_{d=1}^{P}{\eta_{d}\left( x_{i,d} - x_{j,d} \right)^2} \right] \\
#&K_i = f\left(x',x_{i}\right)\;\;\;\;\;\;
#C_{i,j} = f\left(x_{i},x_{j}\right) + \sigma_{\varepsilon}^{2}\cdot \delta_{i,j} \\
#&L = \frac{1}{M}\sum_{k=1}^{M}{ \left( y'_k - y_k \right)^2} \;\;\;\;\;\; \frac{\partial L}{\partial \zeta} = \frac{2}{M}\sum_{k=1}^{M}{ \left( y'_k - y_k \right)} \frac{\partial y'_k}{\partial \zeta} \\
#&\frac{\partial y'_k}{\partial \zeta} = \left[\frac{\partial K}{\partial \zeta}\right]^T \left[ C^{-1} \; y\right] - K^T \left[ C^{-1} \frac{\partial C}{\partial \zeta} C^{-1} \right] y \\
#&\frac{\partial K_{i}}{\partial a_{1}} = \sum_{d=1}^{P}{ x'_{d} \cdot x_{i,d}}
#\;\;\;\;\;\;
#\frac{\partial K_{i}}{\partial v_{o}} =  \text{exp} \left[ - \sum_{d=1}^{P}{\eta_{d}\left( x'_{d} - x_{i,d} \right)^2} \right]
#\;\;\;\;\;\;
#\frac{\partial K_{i}}{\partial \eta_{k}} = -2 \; v_{o}\; \text{exp} \left[ - \sum_{d=1}^{P}{\eta_{d}\left( x'_{d} - x_{i,d} \right)^2} \right]\;\left( x'_{k} - x_{i,k} \right) \\
#&\frac{\partial C_{i,j}}{\partial a_{1}} = \sum_{d=1}^{P}{ x_{i,d} \cdot x_{j,d}}
#\;\;\;\;\;\;
#\frac{\partial C_{i,j}}{\partial v_{o}} =  \text{exp} \left[ - \sum_{d=1}^{P}{\eta_{d}\left( x_{i,d} - x_{j,d} \right)^2} \right]
#\;\;\;\;\;\;
#\frac{\partial C_{i,j}}{\partial \eta_{k}} = -2 \; v_{o}\; \text{exp} \left[ - \sum_{d=1}^{P}{\eta_{d}\left( x_{i,d} - x_{j,d} \right)^2} \right]\;\left( x_{i,k} - x_{j,k} \right)
#\end{align}
# ------------------------------------------------------------------------------------
        self.x = x.copy()
        self.y = y.copy()
        self.n = self.x.shape[0]
        self.m = self.x.shape[1]
        # ----------------------------------------------------
        self.tmp = {}
        self.tmp["p"] = numpy.zeros( ( self.n, self.n ) )
        self.tmp["d"] = numpy.zeros( ( self.n, self.n, self.m ) )
        for i in range( self.n ):
            for j in range( self.n ):
                self.tmp["p"][i,j] = numpy.dot( x[i], x[j] )
                self.tmp["d"][i,j] = x[i] - x[j]
        self.tmp["d2"] = numpy.square( self.tmp["d"] )
        # ----------------------------------------------------
        self.se2 = se2
        self.update( numpy.array( [ 1. for i in range( self.m + 2 ) ] ) )

    
    def update( self, parm: numpy.array, se2: typing.Optional[float] = 1.e-8 ):
        if( parm.shape[0] != self.m + 2 ):
            print( "GPR [update]: wrong parameters vector dimension" )
            return
        self.a1 = parm[0]
        self.v0 = parm[1]
        self.et = parm[2:]
        # ----------------------------------------------------
        self.tmp["e"] = numpy.zeros( ( self.n, self.n ) )
        for i in range( self.n ):
            for j in range( self.n ):
                self.tmp["e"][i,j] = numpy.exp( - numpy.dot( self.et, self.tmp["d2"][i,j] ) )
        self.tmp["k"] = self.a1 * self.tmp["p"] + self.v0 * self.tmp["e"]
        self.a = self.tmp["k"].copy() + self.se2 * numpy.eye( self.n )
        self.tmp["c"] = numpy.linalg.inv( self.a )
        self.a = numpy.dot( self.tmp["c"], self.y )
        
        
    def __call__( self, rx: numpy.array ) -> numpy.array:
        k = numpy.zeros( self.n )
        for i in range( self.n ):
            k[i] = self.a1 * numpy.dot( rx, self.x[i] ) + self.v0 * numpy.exp( - numpy.dot( self.et, numpy.square( rx - self.x[i] ) ) )
        return( numpy.dot( k, self.a ) )


    def floss( self, prm: numpy.array ) -> float:
        self.update( prm )
        return( numpy.sum( numpy.square( numpy.dot( self.tmp["k"], self.a ) - self.y ) ) / self.n )

    
    def gloss( self, prm: numpy.array ) -> numpy.array:
        self.update( prm )
        dd = numpy.dot( self.tmp["k"], self.a ) - self.y
        kc = numpy.dot( self.tmp["k"], self.tmp["c"] )
        pa = numpy.dot( self.tmp["p"], self.a )
        ea = numpy.dot( self.tmp["e"], self.a )
        g = []
        g.append( numpy.sum( dd * ( pa - numpy.dot( kc, pa ) ) ) )
        g.append( numpy.sum( dd * ( ea - numpy.dot( kc, ea ) ) ) )
        for i in range( self.m ):
            ed = numpy.dot( numpy.dot( self.tmp["e"], self.tmp["d"][:,:,i] ), self.a )
            g.append( - 2.0 * self.v0 * numpy.sum( dd * ( ed - numpy.dot( kc, ed ) ) ) )
        return( numpy.sum( numpy.square( dd ) ) / self.n, numpy.array( g ) * 2.0 / self.n )


    def on_fire( self, nit: typing.Optional[int] = 30, tol: typing.Optional[float] = 1.e-6 ) -> tuple:
        stp = 1.0
        cnt = 0
        alp = 0.1
        itr = 0
        ssz = stp
        prm = numpy.array( [ 1. for i in range( self.m + 2 ) ] )
        vel = numpy.zeros( self.m + 2 )
        fcn, grd = self.gloss( prm )
        gnm = numpy.linalg.norm( grd )
        hst = []
        print( fcn, prm )
        while( itr < nit and ssz > tol ):
            if( - numpy.sum( vel * grd ) > 0.0 ):
                tmp = numpy.linalg.norm( vel )
                vel = ( 1 - alp ) * vel - alp * grd / tmp
                if( cnt > 5 ):
                    ssz = min( ssz * 1.1, stp )
                    alp *= 0.99
                cnt += 1
            else:
                alp = 0.1
                ssz *= 0.5
                cnt = 0
                vel = numpy.zeros( self.m + 2 )
            vel -= ssz * grd
            dsp = ssz * vel
            tmp = numpy.linalg.norm( dsp )
            if( tmp > ssz ):
                dsp *= ssz / tmp
            prm += dsp
            fcn, grd = self.gloss( prm )
            gnm = numpy.linalg.norm( grd ) 
            itr += 1
            print( itr, fcn, ssz, prm )
            hst.append( fcn )
        return( prm, hst )
